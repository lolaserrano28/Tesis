qqplot(sim_exacto, sim_aproximado,
main="Gráfico Q-Q puente Vasicek",
xlab="Puente Exacto",
ylab="Puente Aproximado")
abline(0,1, lwd = 2,col="#660999")
qqplot(sim_exacto, sim_aproximado,
main="Gráfico Q-Q puente Vasicek",
xlab="Puente Exacto",
ylab="Puente Aproximado")
abline(0,1, lwd = 2,col="red")
qqplot(sim_exacto, sim_aproximado,
main="Gráfico Q-Q puente Vasicek",
xlab="Puente Exacto",
ylab="Puente Aproximado")
abline(0,1, lwd = 2,col="blue")
plot(T_,puente_vasicek(x0,x,theta,0,sigma,T,N),type = "l",col = "#FF6699",
ylab="Xt",xlab="T",main="Puentes de Vasicek: Aproximación",lwd=1.5,ylim=c(-1,1))
lines(T_,puente_vasicek(x0,x,theta,0,sigma,T,N),type = "l",col = "#660099",lwd=1.5)
lines(T_,puente_vasicek(x0,x,theta,0,sigma,T,N),type = "l",col = "#00CC88",lwd=1.5)
lines(T_,puente_vasicek(x0,x,theta,0,sigma,T,N),type = "l",col = "#FF9933",lwd=1.5)
abline(h=0, lwd = 2,lty=2)
plot(T_,Zi(theta,sigma,x0,x,T,N),type = "l",col = "#FF6699",
ylab="Xt",xlab="T",main="Puentes de Vasicek: Exacto",lwd=1.5,ylim=c(-1,1))
lines(T_,Zi(theta,sigma,x0,x,T,N),type = "l",col = "#660099",lwd=1.5)
lines(T_,Zi(theta,sigma,x0,x,T,N),type = "l",col = "#00CC88",lwd=1.5)
lines(T_,Zi(theta,sigma,x0,x,T,N),type = "l",col = "#FF9933",lwd=1.5)
abline(h=0, lwd = 2,lty=2)
source(here("Códigos/MBGeometrico.R"))
library(here)
source(here("Códigos/Vasicek.R"))
source(here("Códigos/MBGeometrico.R"))
library(here)
source(here("Códigos/Vasicek.R"))
source(here("Códigos/MBGeometrico.R"))
#Función bien: devuelve solo el puente de vasicek
puente_difusion <- function(fun,alpha,beta,theta1,theta2,theta3=NULL,T,N){
bool = FALSE
while(bool == FALSE){
#1=vasicek, 2=MBG
if(fun = 1){
while(bool == FALSE){
#1=vasicek, 2=MBG
if(fun == 1){
x1 <- vasicek(theta1,theta2,theta3,alpha,T,N)
x2 <- rev(vasicek(theta1,theta2,theta3,beta,T,N))
}else{
x1 <- MBG(theta1,theta2,alpha,T,N)
x2 <- rev(MBG(theta1,theta2,beta,T,N))
}
if(cruce(x1,x2)[1]==0){
bool = FALSE
}else{
nu = cruce(x1,x2)[2]
y1 = x1[0:(nu-1)]
y2 = x2[nu:(N+1)]
X = c(y1,y2)
bool = TRUE
}
}
#Función bien: devuelve solo el puente de vasicek
puente_difusion <- function(fun,alpha,beta,theta1,theta2,theta3=NULL,T,N){
bool = FALSE
while(bool == FALSE){
#1=vasicek, 2=MBG
if(fun == 1){
x1 <- vasicek(theta1,theta2,theta3,alpha,T,N)
x2 <- rev(vasicek(theta1,theta2,theta3,beta,T,N))
}else{
x1 <- MBG(theta1,theta2,alpha,T,N)
x2 <- rev(MBG(theta1,theta2,beta,T,N))
}
if(cruce(x1,x2)[1]==0){
bool = FALSE
}else{
nu = cruce(x1,x2)[2]
y1 = x1[0:(nu-1)]
y2 = x2[nu:(N+1)]
X = c(y1,y2)
bool = TRUE
}
}
return(X)
}
#Función bien: devuelve solo el puente de vasicek
puente_difusion <- function(fun,alpha,beta,theta1,theta2,theta3=NULL,T,N){
bool = FALSE
while(bool == FALSE){
#1=vasicek, 2=MBG
if(fun == 1){
x1 <- vasicek(theta1,theta2,theta3,alpha,T,N)
x2 <- rev(vasicek(theta1,theta2,theta3,beta,T,N))
}else if(fun==2){
x1 <- MBG(theta1,theta2,alpha,T,N)
x2 <- rev(MBG(theta1,theta2,beta,T,N))
}
if(cruce(x1,x2)[1]==0){
bool = FALSE
}else{
nu = cruce(x1,x2)[2]
y1 = x1[0:(nu-1)]
y2 = x2[nu:(N+1)]
X = c(y1,y2)
bool = TRUE
}
}
return(X)
}
alpha = 1
beta = 2
T = 1
N = 100
mu = 0
s = 0.1
alpha = 1
beta = 2
puente_difusion(2,alpha,beta,mu,s,T,N)
#Función bien: devuelve solo el puente de vasicek
puente_difusion <- function(fun,alpha,beta,T,N,theta1,theta2,theta3=NULL){
bool = FALSE
while(bool == FALSE){
#1=vasicek, 2=MBG
if(fun == 1){
x1 <- vasicek(theta1,theta2,theta3,alpha,T,N)
x2 <- rev(vasicek(theta1,theta2,theta3,beta,T,N))
}else if(fun==2){
x1 <- MBG(theta1,theta2,alpha,T,N)
x2 <- rev(MBG(theta1,theta2,beta,T,N))
}
if(cruce(x1,x2)[1]==0){
bool = FALSE
}else{
nu = cruce(x1,x2)[2]
y1 = x1[0:(nu-1)]
y2 = x2[nu:(N+1)]
X = c(y1,y2)
bool = TRUE
}
}
return(X)
}
mu = 0
s = 0.1
alpha = 1
beta = 2
puente_difusion(2,alpha,beta,T,N,mu,s)
puente_difusion(2,alpha,beta,T,N,mu,s)
puente_difusion(2,alpha,beta,T,N,mu,0.3)
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,0.3),type = "l")
T_
T_ = seq(0,T,length.out=N+1)
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,0.3),type = "l")
plot(T_,puente_difusion(1,alpha,beta,T,N,a,b,sigma),type = "l",col = "#FF6699",
ylab="T",xlab="X",main="Puentes de Vasicek")
lines(T_,puente_difusion(1,alpha,beta,T,N,a,b,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(1,alpha,beta,T,N,a,b,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(1,alpha,beta,T,N,a,b,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.25
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="T",xlab="X",main="Puentes Mov. Browniano Geométrico")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.25
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="T",xlab="X",main="Puentes Mov. Browniano Geométrico",ylim = c(-2,2))
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.25
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="T",xlab="X",main="Puentes Mov. Browniano Geométrico",ylim = c(-2,0))
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.25
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="T",xlab="X",main="Puentes Mov. Browniano Geométrico",ylim = c(0,2))
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.2
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="T",xlab="X",main="Puentes Mov. Browniano Geométrico",ylim = c(0,2))
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.3
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="T",xlab="X",main="Puentes Mov. Browniano Geométrico",ylim = c(0,2))
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.3
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="T",xlab="X",main="Puentes Mov. Browniano Geométrico",ylim = c(0,2))
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.3
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="X",xlab="T",main="Puentes Mov. Browniano Geométrico",ylim = c(0,2))
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
mu = 0.3
s = 1
alpha = 1
beta = 1
#Pruebas puente MBG
plot(T_,puente_difusion(2,alpha,beta,T,N,mu,sigma),type = "l",col = "#FF6699",
ylab="X",xlab="T",main="Puentes Mov. Browniano Geométrico",ylim = c(0,2))
lines(T_,puente_difusion(2,alpha,beta,T,N,0.5,sigma),type = "l",col = "#660099")
lines(T_,puente_difusion(2,alpha,beta,T,N,0.1,sigma),type = "l",col = "#00CC88")
lines(T_,puente_difusion(2,alpha,beta,T,N,1,sigma),type = "l",col = "#FF9933")
abline(h=alpha, lwd = 2,lty=2)
abline(h=beta,lwd=2,lty=2)
#Normalidad Asintótica
n = 200
muestra_estimadores = numeric(n)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra[i] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
n = 200
muestra_estimadores = numeric(n)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
muestra_estimadores
X
#Consistencia del estimador
T = 10
N = 1000
X0 = 0
a_real = 1
b_real = 3
sigma_real = 2
T_ = seq(0,T,length.out=N+1)
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
MLE_vas
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
X
MLE_vasicek(T_,X)
MLE_vasicek(T_,X)-c(a_real,b_real,sigma_real)
(MLE_vasicek(T_,X)-c(a_real,b_real,sigma_real))*N
data <- data.frame(x1 = rnorm(50),
x2 = rnorm(50),
x3 = rnorm(50))
data
matrix(10,3)
matrix(NA,10,3)
matrix[1]
datos<-matrix(NA,10,3)
row(datos,1)
dato
datos
datos[1,]
datos[1,]==c(1,2,3)
datos[1,]=c(1,2,3)
datos
#Normalidad Asintótica
n = 200
muestra_estimadores = matrix(n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
matrix(n,3)
200
200
#Normalidad Asintótica
n = 200
muestra_estimadores = matrix(NA,n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
muestra_estimadores
mardia(muestra_estimadores)
library(MVN)
mardia(muestra_estimadores)
install.packages(c("BH", "broom", "bslib", "cachem", "car", "cli", "colorspace", "commonmark", "crul", "curl", "data.table", "datawizard", "date", "DescTools", "deSolve", "devEMF", "digest", "doBy", "dplyr", "DT", "e1071", "evaluate", "fansi", "fastmap", "flexsurv", "flextable", "fontawesome", "forcats", "fs", "gdtools", "ggfortify", "ggplot2", "ggpubr", "ggrepel", "ggsci", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "insight", "isoband", "jsonlite", "knitr", "later", "lme4", "lubridate", "markdown", "microbenchmark", "mvtnorm", "officer", "openssl", "openxlsx", "pbkrtest", "pillar", "pkgload", "plotly", "plyr", "processx", "ps", "psych", "purrr", "quantreg", "Rcpp", "RcppArmadillo", "readr", "readxl", "rlang", "rmarkdown", "rstatix", "rstpm2", "rvg", "sass", "shiny", "shinyWidgets", "sourcetools", "sp", "statmod", "stringi", "stringr", "sys", "testthat", "TH.data", "tibble", "tidyr", "timechange", "tinytex", "triebeard", "tzdb", "utf8", "vcd", "vctrs", "viridisLite", "vroom", "waldo", "xfun", "xml2", "yaml", "zip", "zoo"))
library(MVN)
library(here)
library(MVN)
source(here("Códigos/Vasicek.R"))
source(here("Códigos/MLEVasicek.R"))
#Consistencia del estimador
T = 10
N = 1000
X0 = 0
a_real = 1
b_real = 3
sigma_real = 2
T_ = seq(0,T,length.out=N+1)
#Normalidad Asintótica
n = 200
muestra_estimadores = matrix(NA,n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
mardia(muestra_estimadores)
library(MVN)
install.packages("QuantPsyc")
library(QuantPsyc)
mardiaTest(muestra_estimadores)
install.packages("MVN")
library("MVN")
install.packages("MVN")
mardiaTest(muestra_estimadores)
mardiaTest()
mvn()
mvn
mvn()
result = mvn(data = iris[-4], subset = "Species", mvnTest = "hz",
univariateTest = "AD", univariatePlot = "histogram",
multivariatePlot = "qq", multivariateOutlierMethod = "adj",
showOutliers = TRUE, showNewData = TRUE)
result = mvn(data = muestra_estimadores,mvnTest = "mardia",
univariateTest = "AD", univariatePlot = "histogram")
result = mvn(data = muestra_estimadores,mvnTest = "mardia")
result
muestra_estimadores = matrix(NA,n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")
n = 1000
muestra_estimadores = matrix(NA,n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
n = 100
muestra_estimadores = matrix(NA,n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
#Normalidad Asintótica
T = 10
N = 1000
X0 = 0
a_real = 1
b_real = 3
sigma_real = 2
T_ = seq(0,T,length.out=N+1)
n = 100
muestra_estimadores = matrix(NA,n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
#Normalidad Asintótica
T = 10
N = 1000
X0 = 0
a_real = 1
b_real = 3
sigma_real = 2
T_ = seq(0,T,length.out=N+1)
n = 100
muestra_estimadores = matrix(NA,n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
#Normalidad Asintótica
T = 10
N = 1000
X0 = 0
a_real = 1
b_real = 3
sigma_real = 2
T_ = seq(0,T,length.out=N+1)
n = 100
muestra_estimadores = matrix(NA,n,3)
for(i in 1:n){
X = vasicek(a_real,b_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_vasicek(T_, X)-c(a_real,b_real, sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
library(MVN)
#Consistencia del estimador
T = 10
N = 1000
X0 = 1
mu_real = 0.5
sigma_real = 0.2
T_ = seq(0,T,length.out=N+1)
#Normalidad Asintótica
n = 100
muestra_estimadores = matrix(NA,n,2)
for(i in 1:n){
X = MBG(mu_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_gbm(T_, X)-c(mu_real,sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
T = 10
N = 1000
X0 = 1
mu_real = 0.5
sigma_real = 0.2
T_ = seq(0,T,length.out=N+1)
X = MBG_milstein(mu_real,sigma_real,X0,T,N)
#Normalidad Asintótica
n = 100
muestra_estimadores = matrix(NA,n,2)
for(i in 1:n){
X = MBG(mu_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_gbm(T_, X)-c(mu_real,sigma_real))*N
}
muestra_estimadores
library(here)
library(MVN)
source(here("Códigos/MBGeometrico.R"))
source(here("Códigos/MLEgbm.R"))
#Normalidad Asintótica
n = 100
muestra_estimadores = matrix(NA,n,2)
for(i in 1:n){
X = MBG(mu_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_gbm(T_, X)-c(mu_real,sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
muestra_estimadores
library(here)
library(MVN)
source(here("Códigos/MBGeometrico.R"))
source(here("Códigos/MLEgbm.R"))
MLE_gbm()
#Normalidad Asintótica
n = 100
muestra_estimadores = matrix(NA,n,2)
for(i in 1:n){
X = MBG(mu_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_gbm(X, T_)-c(mu_real,sigma_real))*N
}
muestra_estimadores
#Normalidad Asintótica
n = 100
muestra_estimadores = matrix(NA,n,2)
for(i in 1:n){
X = MBG(mu_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_gbm(T_,X)-c(mu_real,sigma_real))*N
}
muestra_estimadores
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
n = 100
muestra_estimadores = matrix(NA,n,2)
for(i in 1:n){
X = MBG(mu_real,sigma_real,X0,T,N)
muestra_estimadores[i,] = (MLE_gbm(T_,X)-c(mu_real,sigma_real))*N
}
mvn(data = muestra_estimadores,mvnTest = "mardia")$multivariateNormality
